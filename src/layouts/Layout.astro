---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Developer | Designer | Innovator" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>
    
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  </head>
  <body class="text-text-primary font-sans antialiased">
    <!-- Clean Dark Background -->
    <div class="fixed inset-0 z-[-1] bg-gradient-to-br from-gray-900 via-slate-900 to-black"></div>
    
    <!-- Subtle accent elements -->
    <div class="fixed inset-0 z-[-1] opacity-30">
      <div class="absolute top-1/4 left-1/4 w-96 h-96 bg-blue-600/10 rounded-full blur-3xl"></div>
      <div class="absolute bottom-1/4 right-1/4 w-80 h-80 bg-purple-600/10 rounded-full blur-3xl"></div>
    </div>
    
    <!-- Content -->
    <div class="relative z-10 min-h-screen">
      <slot />
    </div>
    
    <script>
      // Smooth scroll for navigation links
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', (e) => {
          e.preventDefault();
          const href = anchor.getAttribute('href');
          if (href) {
            const target = document.querySelector(href);
            if (target) {
              target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
              });
            }
          }
        });
      });

      // Intersection Observer for animations
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-fade-in');
          }
        });
      }, observerOptions);

      // Observe all sections
      document.querySelectorAll('section').forEach(section => {
        observer.observe(section);
      });
    </script>
  </body>
</html>

<style is:global>
  /* Custom Font Face Declaration */
  @font-face {
    font-family: 'Satoshi';
    src: url('/fonts/Satoshi-Variable.ttf') format('truetype');
    font-weight: 300 900;
    font-style: normal;
    font-display: swap;
  }

  * {
    box-sizing: border-box;
  }
  
  html {
    scroll-behavior: smooth;
  }
  
  body {
    margin: 0;
    padding: 0;
    line-height: 1.6;
    font-family: 'Satoshi', system-ui, sans-serif;
    overflow-x: hidden;
    width: 100%;
  }
  
  /* Prevent horizontal scrolling */
  html, body {
    max-width: 100vw;
    overflow-x: hidden;
  }
  
  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 8px;
  }
  
  ::-webkit-scrollbar-track {
    background: #1a1a1a;
  }
  
  ::-webkit-scrollbar-thumb {
    background: #333;
    border-radius: 4px;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: #555;
  }
  
  /* Selection color */
  ::selection {
    background: rgba(0, 255, 255, 0.3);
    color: white;
  }
  
  /* Focus styles */
  *:focus {
    outline: 2px solid #00ffff;
    outline-offset: 2px;
  }
  
  /* Clean aesthetic dark theme */
  .glass-effect {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 16px;
  }
  
  /* Subtle scrollbar */
  ::-webkit-scrollbar-track {
    background: rgba(15, 23, 42, 0.8);
  }
  
  ::-webkit-scrollbar-thumb {
    background: rgba(75, 85, 99, 0.8);
    border-radius: 4px;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: rgba(107, 114, 128, 0.8);
  }
</style>
